sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(Sharks, Goblin)
updated_sharks <- c(Sharks, Goblin)
updated_sharks <- c(sharks, Goblin)
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
updated_sharks <- c(sharks,"Goblin")
print(updated_sharks)
print0(updated_sharks)
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
earthquakes[ c > 6.5]
earthquakes[ earthquakes > 6.5]
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[-4]
shark_length[4]
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
print(total_with_discount)
tail$shark_length
tail$sharks
date_has_passed <- function(Date){
date_occurred <- Sys.Date - date_has_passed
return(date_occurred > 0)
}
date_has_passed(as.Date("2020-01-23"))
date_has_passed(as.Date(2020-01-23))
class(date_has_passed)
date_has_passed(as.Date(2020-01-23)
print(date_has_passed)
date_has_passed <- function(Date){
date_occurred <- Sys.Date - date_has_passed
return(date_occurred > 0)
}
date_has_passed(as.Date(2020-01-23))
date_has_passed(as.Date("2020-01-23"))
date_has_passed("2020-01-23")
date_has_passed(2020-01-23)
date_has_passed(as.Date("2020-01-23"))
date_has_passed <- function(Date){
date_occurred <- Sys.Date - Date
return(date_occurred > 0)
}
date_has_passed(as.Date("2020-01-23"))
date_has_passed(as.Date("2020-01-23"))
date_has_passed(as.Date(2020-01-23))
date_has_passed("2020-01-23")
change_year <- function(Date,year){
date_as_string <- as.character(Date)
month_day<- substr(date_as_string,5,10)
return(as.Date(paste0(year,month_day)))
} # Question 5
spring_break_2025 <- change_year(spring_break,2025)
spring_break <- as.Date("2020-03-21") # Question 1
spring_break_2025 <- change_year(spring_break,2025)
print(spring_break_2025) # Question 6
deadline <- as.Date("2020-01-23")
change_year(deadline,2020)
date_has_passed <- function(Date){
deadline <- as.Date()
date_occurred < change_year
return(Sys.Date - change_year)
}
date_has_passed("2020-01-23")
date_has_passed <- function(Date){
current_date <- Sys.Date()
date_occurred <- Date - current_date
return(date_occurred > 0)
}
date_has_passed <- function(Date){
current_date <- Sys.Date()
date_occurred <- Date - current_date
return(as.Date(date_occurred > 0))
}
date_has_passed("2020-01-23")
date_has_passed <- function(Date){
current_date <- Sys.Date()
date_occurred <- as.Date (Date - current_date)
return(as.Date(date_occurred > 0))
}
date_has_passed("2020-01-23")
date_has_passed <- function(Date){
current_date <- Sys.Date()
date_occurred <- as.Date (current_date - Date)
return(date_occurred > 0)
}
date_has_passed(as.Date("2020-01-23"))
date_has_passed <- function(Date){ # Part 4 - Question 8
current_date <-Sys.Date()
days_since_date <- (current_date - Date)
return(days_since_date > 0)
}
date_has_passed(as.Date("2020-01-23"))
date_has_passed <- function(Date){
current_date <- Sys.Date()
date_occurred <- (current_date - Date)
return(date_occurred > 0)
}
date_has_passed(as.Date("2020-01-23"))
date_has_passed <- function(Date){
today_date <- Sys.Date()
date_occurred <- (today_date - Date)
return(date_occurred > 0)
}
date_has_passed(as.Date("2020-01-23"))
birthdays <- list(Mom = as.Date("1963-02-03"),
Brother = as.Date("1989-05-15"))
print(birthdays)
get_next_birthday <- function(Date){
new_year <- change_year(Date,2020)
if (date_has_passed(Date)){
Date <- change_year(Date,2021)
}
return(Date)
}
birthday_brother <- get_next_birthday(birthdays$Brother)
change_year <- function(Date,year){
date_as_string <- as.character(Date)
month_day<- substr(date_as_string,5,10)
return(as.Date(paste0(year,month_day)))
} # Question 5
birthday_brother <- get_next_birthday(birthdays$Brother)
print(birthday_brother)
View(get_next_birthday)
change_year <- function(Date,year){
date_as_string <- as.character(Date)
month_day<- substr(date_as_string,5,10)
return(as.Date(paste0(year,month_day)))
} # Question 5
date_has_passed <- function(Date){
today_date <- Sys.Date()
date_occurred <- (today_date - Date)
return(date_occurred > 0)
} # Question 7
get_next_birthday <- function(Date){
new_year <- change_year(Date,2021)
if (date_has_passed(Date)){
Date <- change_year(Date,2020)
}
return(Date)
} # Question 10
print(birthday_brother)
birthday_brother <- get_next_birthday(birthdays$Brother)
birthdays <- list(Mom = as.Date("1963-02-03"),
Brother = as.Date("1989-05-15"))
birthday_brother <- get_next_birthday(birthdays$Brother)
print(birthday_brother)
next_birthdays <- lapply(birthdays,get_next_birthday)
print(next_birthdays)
numbers <- 1:201
squared_numbers <- numbers * numbers
print(squared_mean)
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- median(squared_numbers)
print(squared_median)
perfect_squares <- numbers[sqroot.numbers = round(sqroot.numbers)]
perfect_squares <- numbers[squared_numbers = round(squared_numbers)]
print(perfect_squares)
employees <- paste("Employee", 1:100)
print(employees)
salaries_2017 <- runif(100, 40000, 50000)
adjustments <- runif(100, -5000, 10000)
salaries <- data.frame(employees, salaries_2017, adjustments)
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$adjustments
view(salaries)
View(salaries)
salaries$got_raise <- salaries$adjustments > 0
View(salaries)
print(salaries[ salaries$employees == "Employee 57" ,"salaries_2018"])
nrow(salaries[salaries$got_raise == TRUE, ])
salaries[ salaries$adjustments == max()]
salaries[ salaries$adjustments == max() ]
biggest_raise <- max(salaries$adjustments)
salaries[ salaries$adjustments == max(salaries$adjustments), "adjustments" ]
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
salaries[ salaries$adjustments == max(salaries$adjustments), "employees" ]
source('~/Desktop/Winter Quarter 2020/INFO 201/Assignment 3/a3-using-data-gaganthind50/assignment.R')
setwd("~/Desktop/Winter Quarter 2020/INFO 201/Assignment 3/a3-using-data-gaganthind50")
source('~/Desktop/Winter Quarter 2020/INFO 201/Assignment 3/a3-using-data-gaganthind50/assignment.R')
source('~/Desktop/Winter Quarter 2020/INFO 201/Assignment 3/a3-using-data-gaganthind50/assignment.R')
data(Titanic)
print(is.data.frame(Titanic))
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
# Exercise 5: dplyr grouped operations
install.packages("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
library("dplyr")
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
View(nycflights13)
dep_delay_by_month <-
# Which month had the greatest average departure delay?
flights %>%
group_by(month)
summarize(
avg_dep_delay = mean(dep_delay)
)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library("nycflights13")
summarize(
avg_dep_delay = mean(dep_delay)
)
dep_delay_by_month <-
# Which month had the greatest average departure delay?
flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_delay)
)
dep_delay_by_month <-
# Which month had the greatest average departure delay?
flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
) %>% filter(avg_dep_delay == max(avg_dep_delay))
delay_by_month <- flights %>%
group_by(month) %>%
summarize(
avg_dep_delay = mean(dep_delay, na.rm = TRUE)
)
plot(delay_by_month)
flights %>%
group_by(dest)%>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
)
flights %>%
group_by(dest)%>%
summarize(
avg_arr_delay = mean(arr_delay, na.rm = TRUE)
)%>%
filter(avg_arr_delay = max(avg_arr_delay, na.rm = TRUE))
setwd("~/Desktop/Exercise/book-exercises/chapter-18-exercises/exercise-1")
source("exercise.R")
source("exercise.R")
library("httr")
library("jsonlite")
